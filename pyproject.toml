[project]
name = "metget-server"
version = "0.4.13"
description = "MetGet-Server Package"
authors = [
    { name = "Zach Cobell", email = "zcobell@thewaterinstitute.org" },
]
license = { text = "MIT" }
requires-python = ">=3.8"
keywords = [ "forecast", "meteorology", "stormsurge" ]
classifiers = [
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Operating System :: OS Independent",
]

[project.urls]
"Homepage" = "https://github.com/waterinstitute/metget-server"
"Bug Reports" = "https://github.com/waterinstitute/metget-server/issues"
"Source" = "https://github.com/waterinstitute/metget-server"

[tool.bumpver]
current_version = "0.4.13"
version_pattern = 'MAJOR.MINOR.PATCH[PYTAGNUM]'
commit_message = "bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
    'version = "{version}"',
]
"src/libraries/libmetget/pyproject.toml" = [
    'version = "{version}"',
]
"src/executables/api/pyproject.toml" = [
    'version = "{version}"',
]
"src/executables/build/pyproject.toml" = [
    'version = "{version}"',
]
"src/executables/download/pyproject.toml" = [
    'version = "{version}"',
]
"src/executables/keymanager/pyproject.toml" = [
    'version = "{version}"',
]
"src/executables/rebuild/pyproject.toml" = [
    'version = "{version}"',
]
"src/libraries/libmetget/src/libmetget/version.py" = [
    'return "{version}"',
]
"helm/metget-server/Chart.yaml" = [
    'version: {version}',
    'appVersion: "{version}"'
]
"helm/metget-server/values.example.yaml" = [
    'version: {version}-stable'
]
"containers/api/Dockerfile" = [
    'LABEL version="{version}"'
]
"containers/build/Dockerfile" = [
    'LABEL version="{version}"'
]
"containers/download/Dockerfile" = [
    'LABEL version="{version}"'
]
"containers/utilities/Dockerfile" = [
    'LABEL version="{version}"'
]
"containers/database/Dockerfile" = [
    'LABEL version="{version}"'
]

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
  "D",           # pydocstyle
  "ANN",         # flake8-annotations
]

ignore = [
  "PLR0913", # Too many arguments
  "PLR2004", # Magic number
  "E501",   # Line too long
  "RET506", # Unnecssary else
  "D100",   # Missing docstring in public module
  "D104",   # Missing docstring in public package
  "D200",   # One-line docstring should fit on one line with quotes
  "D211",   # No blank line before class
  "D203",   # 1 blank line required before class
  "D205",   # 1 blank line required between summary line and description
  "D212",   # Multi-line docstring summary should start at the second line
  "D415",   # First line should end with a period
  "D401",   # First line should be in imperative mood
  "D404",   # First word of the docstring should not be this
  "ISC001", # Implicit string concatenation
  "ANN401", # Dynamic typing
#  "ANN205",  "ANN003", "ANN201", "ANN001", "ANN202", "ANN204", # Eventually we will enable these
  "D107",  "D400",  "D417", "D102", "D101", "D103", "D105", # Eventually we will enable these
]

unfixable = [
  "T20",  # Removes print statements
]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"]
